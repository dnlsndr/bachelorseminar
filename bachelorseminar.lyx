#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass llncs
\begin_preamble
% This is samplepaper.tex, a sample chapter demonstrating the
% LLNCS macro package for Springer Computer Science proceedings;
% Version 2.20 of 2017/10/04
%
% Used for displaying a sample figure. If possible, figure files should
% be included in EPS format.
%
% If you use the hyperref package, please uncomment the following line
% to display URLs in blue roman font according to Springer's eBook style:
% \renewcommand\UrlFont{\color{blue}\rmfamily}
\usepackage{listings}
\usepackage{color}
\usepackage{textcomp} % for upquote

%
% ECMAScript 2015 (ES6) definition by Gary Hammock
%

\lstdefinelanguage[ECMAScript2015]{JavaScript}[]{JavaScript}{
  morekeywords=[1]{await, async, case, catch, class, const, default, do,
    enum, export, extends, finally, from, implements, import, instanceof,
    let, static, super, switch, throw, try},
  morestring=[b]` % Interpolation strings.
}


%
% JavaScript version 1.1 by Gary Hammock
%
% Reference:
%   B. Eich and C. Rand Mckinney, "JavaScript Language Specification
%     (Preliminary Draft)", JavaScript 1.1.  1996-11-18.  [Online]
%     http://hepunx.rl.ac.uk/~adye/jsspec11/titlepg2.htm
%

\lstdefinelanguage{JavaScript}{
  morekeywords=[1]{break, continue, delete, else, for, function, interface, type, if, in,
    new, return, this, typeof, var, let, const, void, while, with},
  % Literals, primitive types, and reference types.
  morekeywords=[2]{false, null, true, boolean, number, string, undefined,
    Array, Boolean, Date, Math, Number, String, Object},
  % Built-ins.
  morekeywords=[3]{eval, parseInt, parseFloat, escape, unescape},
  sensitive,
  morecomment=[s]{/*}{*/},
  morecomment=[l]//,
  morecomment=[s]{/**}{*/}, % JavaDoc style comments
  morestring=[b]',
  morestring=[b]"
}[keywords, comments, strings]


\lstalias[]{ES6}[ECMAScript2015]{JavaScript}

% Requires package: color.
\definecolor{mediumgray}{rgb}{0.5, 0.5, 0.5}
\definecolor{mediumblue}{rgb}{0.0, 0.0, 0.8}
\definecolor{forestgreen}{rgb}{0.13, 0.55, 0.13}
\definecolor{darkviolet}{rgb}{0.58, 0.0, 0.83}
\definecolor{royalblue}{rgb}{0.25, 0.41, 0.88}
\definecolor{crimson}{rgb}{0.86, 0.8, 0.24}

\lstdefinestyle{JSES6Base}{
  backgroundcolor=\color{white},
  basicstyle=\ttfamily,
  breakatwhitespace=true,
  breaklines=true,
  captionpos=b,
  columns=fullflexible,
  commentstyle=\color{mediumgray}\upshape,
  emph={},
  emphstyle=\color{crimson},
  extendedchars=true,  % requires inputenc
  fontadjust=true,
  frame=single,
  framesep=6pt, 
  identifierstyle=\color{black},
  keepspaces=true,
  keywordstyle=\color{mediumblue},
  keywordstyle={[2]\color{darkviolet}},
  keywordstyle={[3]\color{royalblue}},
  numbers=left,
  numbersep=10pt,
  numberstyle=\tiny\color{mediumgray},
  rulecolor=\color{mediumgray},
  showlines=true,
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  stringstyle=\color{forestgreen},
  tabsize=2,
  title=\lstname,
  upquote=true  % requires textcomp
}

\lstdefinestyle{JavaScript}{
  language=JavaScript,
  style=JSES6Base
}
\lstdefinestyle{ES6}{
  language=ES6,
  style=JSES6Base
}
\end_preamble
\options runningheads
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding default
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "lmtt" "Dank Mono"
\font_math "auto" "default"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 80
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Typescript: Gradually typing JavaScript
\end_layout

\begin_layout Author
Daniel
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset

Schneider
\end_layout

\begin_layout Author Running
D.
 Schneider
\end_layout

\begin_layout Institute
Ludwig-Maximilians-University, Geschwister-Scholl-Platz 1, 80539 Munich,
 Germany, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
email{poststelle@verwaltung.uni-muenchen.de}
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
\begin_inset Quotes eld
\end_inset

TypeScript is an open-source language which builds on JavaScript, one of
 the world’s most used tools, by adding static type definitions.
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ref_ts_homepage"
literal "false"

\end_inset


\end_layout

\begin_layout Abstract
This paper will discuss the benefits TypeScript can give developers in terms
 of software quality and security.
 It will highlight examples of the main features that are part of the TypeScript
 standard and how those can be leveraged to convert a previous JavaScript
 program into a safer TypeScript program.
\end_layout

\begin_layout Abstract
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
keywords
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

TypeScript 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 JavaScript 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Type safety 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
and
\end_layout

\end_inset

 Gradual typing
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Programing is the act or process of planning or writing a program
\begin_inset CommandInset citation
LatexCommand cite
key "ref_programing_def"
literal "false"

\end_inset

.
 The general goal of programing languages is to make it easier for humans
 to interact with computers in a comprehensible way.
 This results in programing languages that increasinly abstract away complex
 mechanisms to speed up or simplify program development.
 A relatively recent phenomena is the complete removal of type annotations
 within programing languages, whereby the compiler completely infers variable
 types.
 This gives the developer a simpler workflow by leaving out the mental step
 of thinking about typings.
 Although this may first seem to be a good thing, it has become increasingly
 apparent, that bigger programs degrade in software quality if software
 quality is not a priority.
 This can be mitigated by using typing systems with static type checking,
 but would require a complete rewrite in a type annotated and type checked
 language.
 One of the most popular scripting languages out there – JavaScript – does
 away with type annotations, which to the demise of big software projects,
 written in JavaScript, results in degrading software quality quite quickliy
 if not taken care of.
 
\begin_inset Newline newline
\end_inset

To remedy this fundamental issue of JavaScript, TypeScript was born.
 It allows for code type annotations and static type checking of the program
 at compile time, while still being able to infer untyped code areas to
 the point of compiling plain JavaScript code without any type annotations.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To get a better feeling for what benefits TypeScript can give us, we will
 have a look at a possibly problematic JavaScript snippet:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Problematic JavaScript code snippet
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

let anotherNumber = 
\begin_inset Quotes eld
\end_inset

13
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

let numberList = [1,2,3,5,8]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function insertNumberAndReduce(list, newNumber){
\end_layout

\begin_layout Plain Layout

  list.push(newNumber)
\end_layout

\begin_layout Plain Layout

  return list.reduce((acc, val) => acc + val)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

let result = insertNumberAndReduce(numberList, anotherNumber)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When executing this code snippet, we get the result of 
\begin_inset Quotes eld
\end_inset

1913
\begin_inset Quotes erd
\end_inset

 which obiously is false.
 To better understand what is happening here, we will follow this code in
 a more abstract manner:
\end_layout

\begin_layout Enumerate
String 
\begin_inset Quotes eld
\end_inset

13
\begin_inset Quotes erd
\end_inset

 gets inserted into the number list, consisting of integers
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

insertNumberAndReduce
\begin_inset Quotes erd
\end_inset

 reduces all numbers by adding them
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

13
\begin_inset Quotes erd
\end_inset

 is added on to the sum of all preceeding numbers in the numberList
\end_layout

\begin_layout Enumerate
Adding strings and numbers is not possible, therefore the sum of the numbers
 is cast into a string and both strings are concatenated
\end_layout

\begin_layout Enumerate
We recieve the result 
\begin_inset Quotes eld
\end_inset

1913
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Since there is no system that can check if what we are doing may not be
 intended, JavaScript tries its best to compute our code.
\end_layout

\begin_layout Claim
This issue could be easily prevented by keeping us from inserting a string
 into a list of numbers, that is otherwise only made up of integers
\end_layout

\begin_layout Standard
Let us now rewrite the example into TypeScript with the corresponding type
 annotations and see if we are able to compile this snippet successfully:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Fixed TypeScript code snippet
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

let anotherNumber = 
\begin_inset Quotes eld
\end_inset

13
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

let numberList = [1,2,3,5,8]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

function insertNumberAndReduce
\end_layout

\begin_layout Plain Layout

(list: number[], newNumber: number): number {
\end_layout

\begin_layout Plain Layout

  list.push(newNumber)
\end_layout

\begin_layout Plain Layout

  return list.reduce((acc, val) => acc + val)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

let result = insertNumberAndReduce(numberList, anotherNumber)
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Note
We have added type annotations to the function definition such that the
 function will only accept a list of numbers, a additional number and will
 only return a value of type number
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Problem
TypeScript will throw an error upon compilation, since the function call
 in line 12 does not comply with the function definition and its type annotation
s.
 
\end_layout

\begin_layout Section
Typescript in a nutshell
\end_layout

\begin_layout Subsection
History
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\begin_layout Plain Layout

[
\end_layout

\begin_layout Plain Layout

To get to know TypeScript a bit better, we will have a quick look at the
 history
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

Typescript v0.8 was initially created by Microsoft in 2012 an published to
 the public.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

In the following year they released v0.9 which brought with it a generics
 system for type annotations.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

In 2014 Microsoft then released the first production-ready version v1.0 integrati
ng the TypeScript compiler into their already existing Visual Sudio IDE
 platform, bringing TypeScript to a broader audience of developers that
 might want to try TypeScript.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

Later that year, in July, a new compiler version was released with five
 times the performance of the old compiler, improving production implementaion.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

In 2016 v2.0 was released, that tried to remedy a general programing language
 issue commonly called the 
\begin_inset Quotes eld
\end_inset

Billion-Dollar mistake
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

Later v3.0 was released in 2018 brining with it several smaller features
 like tuples.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
medskip
\end_layout

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\begin_layout Plain Layout

The most recent version v4.0 was released 2020 and brings improvements to
 the existing Tuple system by adding Variadic Tuples.
\end_layout

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Static type checking
\end_layout

\begin_layout Standard
Typescript if of it self is a compiler.
 It takes in TypeScript code and compiles it down to JavaScript while also
 doing static type checkint.
 Static type checking is the process of parsing the code into an AST (Abstract
 Syntax Tree) including type annotations.
 The types in the AST are then infered, if not existant, and are checked
 for soundness by the Type Resolver.
\end_layout

\begin_layout Subsection
Gradual typing
\end_layout

\begin_layout Standard
TypeScript leverages gradual typing.
 Gradual typing is the principle of gradually adapting type annotations
 in your program, with the ability to complete leave out type annotations.
 This enables developers to gradually migrate over JavaScript projects to
 TypeScript without having to worry about code compatability.
 TypeScript will try to infer as many types as possible, but cannot guarantee
 complete type safety as long as there are sections in a program that are
 not type-annotated.
\end_layout

\begin_layout Section
Features
\end_layout

\begin_layout Standard
We will have a look at the four most important features TypeScript brings
 with it.
 Knowing these features is enough to provide type safety to your code.
\end_layout

\begin_layout Subsection
Interfaces and Types
\end_layout

\begin_layout Standard
Interfaces and Types are the most basic building blocks within TypeScript
 and allow us to define custom object and type schemas.
 First we will have a look at how Interfaces and Types are defined and reference
d in code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Interface and Type declarations
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

interface User {
\end_layout

\begin_layout Plain Layout

	name: string
\end_layout

\begin_layout Plain Layout

	email: string
\end_layout

\begin_layout Plain Layout

	age?: number
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

// An equivalent to the interface can also be defined as a type
\end_layout

\begin_layout Plain Layout

type User = {
\end_layout

\begin_layout Plain Layout

	name: string
\end_layout

\begin_layout Plain Layout

	email: string
\end_layout

\begin_layout Plain Layout

	age?: number
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Question
What is the difference between an Interface and a Type?
\end_layout

\begin_layout Solution
There are hardly any differences between Interfaces and Types.
 Types have the ability to define primitive types such as numbers and strings,
 while Interfaces can only defined object structures and types within.
 Types can not be merged with each other, while Interfaces have the capability
 to be merged, should the developer define several Interfaces with the same
 name.
 In general, Interfaces should be preferred to Types if they can be used
 interchangably.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
These Interfaces and Types can then be used in the following manner:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Interface and Type usage
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

const user: User = {
\end_layout

\begin_layout Plain Layout

	name: 
\begin_inset Quotes eld
\end_inset

John Doe
\begin_inset Quotes erd
\end_inset

,
\end_layout

\begin_layout Plain Layout

	email: 
\begin_inset Quotes eld
\end_inset

john@doe.com
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Note
The 
\begin_inset Quotes eld
\end_inset

age
\begin_inset Quotes erd
\end_inset

 key can be omitted, since we've made the key optional in the type definition
 by suffixing the key with a question-mark
\end_layout

\begin_layout Subsection
Tuples
\end_layout

\begin_layout Standard
Tules give you the ability to type the structure of an array.
 This means that it is possible to define a specific type for each index
 of that array and enabling us to build tuples out of several other tuple
 building blocks, called variadic tuples.
 In the following example we can see how simple Tuples can be implemented:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Tuple usage
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

// Type structure: <order>, <key>, <value>
\end_layout

\begin_layout Plain Layout

type Detail = [number, string, number | string]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

let userDetails: Detail[] = [
\end_layout

\begin_layout Plain Layout

	[1, 'age', 22],
\end_layout

\begin_layout Plain Layout

	[2, 'semester', 6],
\end_layout

\begin_layout Plain Layout

	[10, 'name', 'John Doe']
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Note
Using a pipe symbol (|) between types resembles an OR operator.
 Therefore the type of that element can be either a number OR a string
\end_layout

\begin_layout Standard
By using Tuples, TypeScript can prevent wrong usage of arrays:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Problematic Tuple usage
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

let userDetails: Detail[] = [
\end_layout

\begin_layout Plain Layout

	[1, 'age', 22, 'a fourth element'],
\end_layout

\begin_layout Plain Layout

	[2, 5, 6],
\end_layout

\begin_layout Plain Layout

	['some order', 'name', 'John Doe']
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Problem
TypeScript will throw an error upon compilation, since the Arrays within
 the 'userDetails' Array do not correspond to the 'Detail' type
\end_layout

\begin_layout Standard
Finally we also have the ability to create Tuples out of other Tuples.
 This is handy if one e.g.
 knows the first elements of an array but wants to dynamically define all
 following element types of that Array.
 These Variadic Tuples can reduce code complexity.
 Rewriting our previous working example into Variadic Tuples results in
 the following code:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[style=ES6, language=JavaScript, caption=
\begin_inset Quotes erd
\end_inset

Variadic Tuples
\begin_inset Quotes erd
\end_inset

]
\end_layout

\begin_layout Plain Layout

// Type structure: <order>, <key>, <custom element types>
\end_layout

\begin_layout Plain Layout

type Detail<T extends unknown[]> = [number, string, ...T]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

let userDetails: Detail<[number | string]>[] = [
\end_layout

\begin_layout Plain Layout

	[1, 'age', 22],
\end_layout

\begin_layout Plain Layout

	[2, 'semester', 6],
\end_layout

\begin_layout Plain Layout

	[10, 'name', 'John Doe']
\end_layout

\begin_layout Plain Layout

]
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Remark
This Variadic Tuple system now lets us define the <custom element types>
 at a variable basis, giving us more freedom in reusing Types, while still
 forcing us to abide to general typing structures like the 'Detail' type.
\end_layout

\begin_layout Subsection
Namespaces
\end_layout

\begin_layout Subsection
Generics
\end_layout

\begin_layout Section
Integration
\end_layout

\begin_layout Subsection
Language server
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ref_ts_homepage"
literal "false"

\end_inset

 Typescript Homepage, 
\begin_inset CommandInset href
LatexCommand href
target "https://www.typescriptlang.org/"
literal "false"

\end_inset

.
 Last accessed August 8, 2021.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ref_programing_def"
literal "false"

\end_inset

 Thesaurus programing definition, 
\begin_inset CommandInset href
LatexCommand href
target "https://www.dictionary.com/browse/programing"
literal "false"

\end_inset

.
 Last accessed August 9, 2021.
\end_layout

\end_body
\end_document
